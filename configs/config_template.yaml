---
# Config file for training MET autoencoder (triple modality)

# Set device
device: "cpu"

# Set paths
data_file: data/raw/MET_M120x4_50k_4Apr23.mat  # Location of MATLAB file containing processed input data
output_dir: data/met   # Location to save training results (new folder will be created within output_dir)

# Set experiment/optimization properties:
experiment: autoencoder   # Type of experiment
modalities: [T, E, M] # Which modalities to use in the experiment
num_epochs: 5000   # Number of epochs to train
latent_dim: 3   # Dimension of latent space for each modality
batch_size: 1000   # Batch size used during training
learning_rate: 0.001   # Learning rate for the ADAM optimizer
patience: .inf   # How long to wait for improvement of loss
improvement_frac: 0.01   # How much improvement needs to occur for stoppage to be delayed
check_step: 100 # How often to save model checkpoints
folds: 10 # Number of folds to use for cross-validation
val_split: 0.25 # Fraction of data to use for validation (ignored if folds > 0)
seed: 42 # Random seed to use for validation splits

# Set criteria for cell specimen inclusion in experiment
select:
  platforms: ["patchseq"]

# Set modality-type sample fraction for each batch ("native" uses frequency found in data)
# Note that these fractions are computed after the filtering criteria in the "select" field above
# T -> transcriptomic, E -> electro-physiological, M -> morphological
modal_frac:
  T: native
  E: native
  M: native
  TM: native
  TE: native
  EM: native
  MET: native


# Set auto-encoder architecture
T_hidden: [256, 128] # Hidden layer output size for transcriptomic arm
E_hidden: [128, 64] # Hidden layer output size for electro-physiological arm
T_dropout: 0.5 # Dropout fraction for transcriptomic arm
E_dropout: 0.1 # Dropout fraction for electro-physiological arm
gauss_var_frac: 0.05   # Fraction of variance to insert as augmentation for electro-physiological arm
encoder_cross_grad: False # Whether cross-reconstruction gradient should propagate back to encoder

losses:
  T: r2
  E: r2
  M: mse

# Set loss weights. Single letters indicates self-reconstruction loss, 
# A=B is cross-reconstruction loss for modal A generating modality B
# A-B is the coupling loss between latent spaces of modality A and B, with gradient only propogated to B
T: 1.0   # transcriptomic
E: 1.0   # E reconstruction loss weight coefficient
M: 1.0   # M reconstruction loss weight coefficient

E-T: 1.0   # E_T coupling loss weight coefficient
E-M: 1.0
M-T: 1.0   # M_T coupling loss weight coefficient
M-E: 1.0
T-E: 1.0   # T_E coupling loss weight coefficient
T-M: 1.0   # T_M coupling loss weight coefficient

E=T: 1.0   # E_T coupling loss weight coefficient
E=M: 1.0
M=T: 1.0   # M_T coupling loss weight coefficient
M=E: 1.0
T=E: 1.0   # T_E coupling loss weight coefficient
T=M: 1.0   # T_M coupling loss weight coefficient

EM: 0.0   # ME reconstruction loss weight coefficient
T-EM: 0.0   # T_ME coupling loss weight coefficient
EM-T: 0.0   # ME_T coupling loss weight coefficient
EM-E: 0.0   # ME_E coupling loss weight coefficient
EM-M: 0.0   # ME_M coupling loss weight coefficient
E-EM: 0.0
M-EM: 0.0

T=EM: 0.0   # T_ME coupling loss weight coefficient
EM=T: 0.0   # ME_T coupling loss weight coefficient
EM=E: 0.0   # ME_E coupling loss weight coefficient
EM=M: 0.0   # ME_M coupling loss weight coefficient
E=EM: 0.0
M=EM: 0.0


# Set SLURM parameters:
partition: 'celltypes'
cpus: 8
gpus: 1
nodes: 1
memory: '20g'
time: '100:00:00'
directory: '/allen/programs/celltypes/workgroups/mousecelltypes/MachineLearning/Ian/code/cplAE_MET'
conda: 'cplae'
